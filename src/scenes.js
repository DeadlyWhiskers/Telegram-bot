const { Scenes, session, Markup } = require("telegraf")
const { message } = require("telegraf/filters") 
// const { Pool, Client } = require("pg")
const { userPool, adminPool, doctorPool } = require("./pools")

class SceneGen {

    async ClearScreen(ctx) {
        console.log(ctx.session.message_id_tempMG)
        ctx.session.message_id_tempMG.forEach(i => ctx.deleteMessage(i))
        ctx.session.message_id_tempMG = []
    }

    ShowError(ctx){
        ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 
            Markup.inlineKeyboard([
            Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'returnToMainMenu')])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
    }

    GenMainScene() {
        const MainScene = new Scenes.BaseScene('MainScene')
        MainScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.replyWithPhoto({source: './photos/main.jfif'},
            {
                caption: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∞–Ω–∞—Ç–æ—Ä–∏–π \"–†—è–¥–æ–º —Å –Ø–ª—Ç–æ–π\"!
–ö–æ–º–ø–ª–µ–∫—Å —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω –Ω–∞ —é–∂–Ω–æ–º –±–µ—Ä–µ–≥—É –∫—Ä—ã–º—Å–∫–æ–≥–æ –ø–æ–ª—É–æ—Å—Ç—Ä–æ–≤–∞, –Ω–µ–¥–∞–ª–µ–∫–æ –æ—Ç –°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—è.
–£ –Ω–∞—Å –≤—ã —Å–º–æ–∂–µ—Ç–µ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å –≤ –∫—Ä–∞—Å–∏–≤—ã—Ö –∫–æ—Ä–ø—É—Å–∞—Ö –≤ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö —Å—Ç–∏–ª—è—Ö, –ø—Ä–æ–≥—É–ª—è—Ç—å—Å—è –ø–æ –∂–∏–≤–æ–ø–∏—Å–Ω–æ–º—É –ø–∞—Ä–∫—É, 
–ø–æ–ø–ª–∞–≤–∞—Ç—å –≤ —Ç—ë–ø–ª–æ–º –º–æ—Ä–µ –∏ –ø–æ–∫–æ—Ä–º–∏—Ç—å –∫–æ—Ç–∏–∫–æ–≤. –ñ–µ–ª–∞–µ–º –ø—Ä–∏—è—Ç–Ω–æ–≥–æ –æ—Ç–¥—ã—Ö–∞!`,
reply_markup: Markup.inlineKeyboard([
                [Markup.button.callback('–¶–µ–Ω—ã –∏ –∫–æ—Ä–ø—É—Å–∞üè¢','pricelist'),
                Markup.button.callback('–£–∑–Ω–∞—Ç—å –æ –ø–∏—Ç–∞–Ω–∏–∏ü•ê','foodlist')],
                [Markup.button.callback('–ü—Ä–æ—Ü–µ–¥—É—Ä—ã‚ù§Ô∏è','procedureslist')],
                [Markup.button.callback('–ë—Ä–æ–Ω—åüóìÔ∏è','reservationMenu')]
            ]).reply_markup
        })).message_id)
        })
        MainScene.command('secretmenu', async (ctx) => {
            this.ClearScreen(ctx)
            ctx.deleteMessage()
            console.log(ctx.session.message_id_temp)
            ctx.session.message_id_tempMG.push((await ctx.reply('–í—ã –æ—Ç–∫—Ä—ã–ª–∏ —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –º–µ–Ω—é –¥–ª—è –ø–µ—Ä—Å–æ–Ω–∞–ª–∞, –∫–µ–º –≤—ã —è–≤–ª—è–µ—Ç–µ—Å—å?', 
            Markup.inlineKeyboard([
                [Markup.button.callback('–Ø –≤—Ä–∞—áüíä', 'doctorMenu')],
                [Markup.button.callback('–Ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Äüñ•Ô∏è', 'adminMenu')],
                [Markup.button.callback('–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é‚ùå', 'reenterMenu')],

            ]))).message_id)
        })
        MainScene.action('doctorMenu', async (ctx) => {
            this.ClearScreen(ctx)
            ctx.scene.enter('DoctorGuardScene')
        })
        MainScene.action('adminMenu', async (ctx) => {
            this.ClearScreen(ctx)
            ctx.scene.enter('AdminGuardScene')
        })
        MainScene.action('reenterMenu', async (ctx) => {
            this.ClearScreen(ctx)
            ctx.scene.reenter()
        })
        MainScene.action('returnToMainMenu', async (ctx) => {
            this.ClearScreen(ctx)
            ctx.scene.reenter()
        })
        MainScene.action('pricelist', async (ctx) => {
            this.ClearScreen(ctx)
            // –¢—É—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–æ, –∫–∞–∫ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –º–µ–Ω—é—à–∫–∞–º–∏ –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö —Å –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∞–º–∏, –æ—á–µ–Ω—å –í–ê–ñ–ù–û!!
            userPool.query("select * from building ORDER BY room_price").then(result => {
                var messageText = `–í –Ω–∞—à–µ–º —Å–∞–Ω–∞—Ç–æ—Ä–∏–∏ –µ—Å—Ç—å ${result.rows.length} –ø—Ä–µ–∫—Ä–∞—Å–Ω—ã—Ö –∫–æ—Ä–ø—É—Å–∞, –∫–∞–∂–¥—ã–π –≤–ø–µ—á–∞—Ç–ª—è–µ—Ç –ø–æ-—Å–≤–æ–µ–º—É:`
                result.rows.forEach((item, index) => {
                    messageText += '\n' + (index+1) + '. ' + '*' + item['building_name'] + '*' + '\n–¶–µ–Ω–∞ –º–µ—Å—Ç–∞ - ' + item['room_price'] + '—Ä—É–±/—Å—É—Ç–∫–∏ :\n' + item['buidling_desc']
                })
                var mediaObjArr = []
                result.rows.forEach((item) => {
                    mediaObjArr.push({type: 'photo', media: {source: item['img_path']}})
                })
                mediaObjArr[0]['caption'] = messageText
                mediaObjArr[0]['parse_mode'] = 'Markdown'
                ctx.replyWithMediaGroup(mediaObjArr).then(result => {
                    result.forEach((item) => ctx.session.message_id_tempMG.push(item['message_id']))
                    ctx.reply('„Ö§', Markup.inlineKeyboard([
                    Markup.button.callback('–ë—Ä–æ–Ω—åüóìÔ∏è', 'reservationMenu'),
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†', 'reenterMenu')
                    ])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))})

            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        MainScene.action('foodlist', async (ctx) => {
            await this.ClearScreen(ctx)
            userPool.query('select feeding_name, feeding_price, img_path from feeding_type').then(result => {
                var messageText = `–ù–∞—à —Å–∞–Ω–∞—Ç–æ—Ä–∏–π –º–æ–∂–µ—Ç –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≤–∞–º —Å–∞–º—É—é —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—É—é –µ–¥—É —Å–æ –≤—Å–µ–≥–æ –º–∏—Ä–∞. –ú–µ–Ω—é –º–µ–Ω—è–µ—Ç—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. –û—Ç —Å–∞–ª–∞—Ç–æ–≤ –¥–æ –æ–≤—Å—è–Ω—ã—Ö —à–∞—Ä–∏–∫–æ–≤, –≥–æ–ª–æ–¥–Ω—ã–º–∏ –≤—ã –Ω–µ –æ—Å—Ç–∞–Ω–µ—Ç–µ—Å—å!`
                result.rows.forEach((item, index) => {
                    messageText += '\n' + (index+1) + ' *' + item.feeding_name + '*' + '\n' + '–¶–µ–Ω–∞: ' + item.feeding_price
                    + ' —Ä—É–±/—á–µ–ª/—Å—É—Ç.'
                })
                var mediaObjArr = []
                result.rows.forEach((item) => {
                    mediaObjArr.push({type: 'photo', media: {source: item['img_path']}})
                })
                mediaObjArr[0]['caption'] = messageText
                mediaObjArr[0]['parse_mode'] = 'Markdown'
                ctx.replyWithMediaGroup(mediaObjArr).then(result => {
                    result.forEach((item) => ctx.session.message_id_tempMG.push(item['message_id']))
                    ctx.reply('„Ö§', Markup.inlineKeyboard([
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†', 'reenterMenu')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))})
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        MainScene.action('procedureslist', async (ctx) => {
            await this.ClearScreen(ctx)
            userPool.query('select distinct procedure_name, procedure_price from procedure_').then(result => {
                var messageText = `–í –Ω–∞—à–µ–º —Å–∞–Ω–∞—Ç–æ—Ä–∏–∏ –≤—ã —Å–º–æ–∂–µ—Ç–µ –ø–æ—Å–µ—Ç–∏—Ç—å —Å–∞–º—ã–µ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –¥–ª—è —É–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Å–≤–æ–µ–≥–æ –∑–¥–æ—Ä–æ–≤—å—è. –í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:`
                result.rows.forEach((item, index) => {
                    messageText += '\n' + (index+1) + ' *' + item.procedure_name + '*' + '\n' + '–¶–µ–Ω–∞: ' + item.procedure_price
                    + ' —Ä—É–±.'
                })
                    ctx.replyWithPhoto({source: './photos/procedures.png'}, {caption: messageText, reply_markup: Markup.inlineKeyboard([
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†', 'reenterMenu')]).reply_markup, parse_mode: 'Markdown'}).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        MainScene.action('reservationMenu', async (ctx) => {
            this.ClearScreen(ctx)
            console.log(ctx.from.first_name, ctx.from.last_name, ctx.update.callback_query.from.username)
            userPool.query(`select building_name, room.room_id, feeding_type.feeding_name, reservation.reservation_price, to_char(date_in, 'YYYY-MM-DD') as date_in, to_char(date_out, 'YYYY-MM-DD') as date_out,
            extract(day from date_out::timestamp-date_in::timestamp) as nights 
            from reservation join feeding_type on feeding_type.feeding_id = reservation.feeding_id
            join room on room.room_id = reservation.room_id join building on building.building_id = room.building_id where reservation_id = ${ctx.from.id}`).then(result => {
                ctx.session.reservation = result
                if(result.rowCount == 0){
                    ctx.reply('–í—ã –ø–æ–∫–∞ –Ω–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ —É –Ω–∞—Å –º–µ—Å—Ç, —Ö–æ—Ç–∏—Ç–µ —ç—Ç–æ —Å–¥–µ–ª–∞—Ç—å?',
                    Markup.inlineKeyboard([
                        Markup.button.callback('–ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –º–µ—Å—Ç–∞‚úÖ', 'enterReservationMenu'),
                        Markup.button.callback('–ù–µ—Ç, —Å–ø–∞—Å–∏–±–æ‚ùå', 'reenterMenu'),
                    ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                }
                else{
                    userPool.query(`select * from guest join reservation_rel on guest.guest_id = reservation_rel.guest_id
                    where reservation_id = ${ctx.from.id}`).then(result => {
                        ctx.session.guests = ''
                        result.rows.forEach(row => {
                            ctx.session.guests += `${row.guest_name} ${row.guest_surname} ${row.guest_patronymic}\n`
                        })
                        ctx.replyWithPhoto({source: './photos/reception.jfif'},
                        {
                            caption: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.from.first_name}, –≤—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ –º–µ—Å—Ç–∞ –Ω–∞ ${result.rowCount} —á–µ–ª–æ–≤–µ–∫ –≤ –Ω–æ–º–µ—Ä–µ ${ctx.session.reservation.rows[0].room_id} –Ω–∞ –¥–∞—Ç—ã:
${ctx.session.reservation.rows[0].date_in.split('-').join('.')} \u2014 ${ctx.session.reservation.rows[0].date_out.split('-').join('.')} (${ctx.session.reservation.rows[0].nights} –Ω–æ—á–µ–π).
–ö–æ—Ä–ø—É—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è \u2014 ${ctx.session.reservation.rows[0].building_name}
–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è \u2014 ${ctx.session.reservation.rows[0].feeding_name}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å \u2014 ${ctx.session.reservation.rows[0].reservation_price} —Ä—É–±.

–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö:
${ctx.session.guests}`,
                        reply_markup: Markup.inlineKeyboard([
                            [Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—éüè†','reenterMenu')],
                            [Markup.button.callback('–°–ø–∏—Å–æ–∫ –ø—Ä–æ—Ü–µ–¥—É—Äü©∫','seeProcedures'),
                            Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—åüóëÔ∏è','removeReservation')]
                        ]).reply_markup
                        }).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                    }).catch(e => {
                        console.log(e)
                        this.ShowError(ctx)
                    })
                }
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        MainScene.action('enterReservationMenu', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('DateInScene')
        })
        MainScene.action('removeReservation', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.reply(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å?:`,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–î–∞‚úÖ', 'removeReservationQuery'),
                        Markup.button.callback('–ù–µ—Ç‚ùå', 'reservationMenu')
                    ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
        })
        MainScene.action('removeReservationQuery', async (ctx) => {
            await this.ClearScreen(ctx)
            userPool.query(`select delete_reservation(${ctx.from.id})`).then(()=>{
                ctx.reply(`–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`,
                Markup.inlineKeyboard([
                    Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æüëç', 'reenterMenu')
                ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        MainScene.action('seeProcedures', async (ctx) => {
            await this.ClearScreen(ctx)
            userPool.query(`select guest_name, dense_rank() over (ORDER BY guest_name)-1 as guest_pos, guest_surname, guest_patronymic, doctor_patronymic, doctor_name, doctor_specialization, procedure_name, to_char(procedure_day, 'YYYY-MM-DD') as procedure_day, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end, procedure_price, cabinet 
            from procedure_appointment join guest on 
            procedure_appointment.guest_id = guest.guest_id join procedure_ on 
            procedure_appointment.procedure_id = procedure_.procedure_id join doctor on
            procedure_.doctor_id = doctor.doctor_id 
            join reservation_rel on 
            guest.guest_id = reservation_rel.guest_id where reservation_id = ${ctx.from.id}`).then(result => {
                if (result.rowCount != 0){ctx.session.procedureList = []
                    for (ctx.session.tempi = 0; ctx.session.tempi <= Math.max(...result.rows.map(row => parseInt(row.guest_pos))); ctx.session.tempi++)
                    ctx.session.procedureList.push('')
                    result.rows.forEach((item, index) => {
                        if(ctx.session.procedureList[item.guest_pos].length == 0) ctx.session.procedureList[item.guest_pos] = `${parseInt(item.guest_pos)+1} ${item.guest_name} ${item.guest_surname}:\n`
                        ctx.session.procedureList[item.guest_pos] += `   ${item.procedure_name}\n   –í—Ä–µ–º—è: ${item.procedure_start}-${item.procedure_end} –î–∞—Ç–∞: ${item.procedure_day.split('-').join('.')}\n   –í—Ä–∞—á: ${item.doctor_name} ${item.doctor_patronymic}\n   ${item.doctor_specialization}\n   –ö–∞–±–∏–Ω–µ—Ç: ${item.cabinet} –¶–µ–Ω–∞:${item.procedure_price} —Ä—É–±.\n\n`
                    })
                    ctx.session.procedureList = ctx.session.procedureList.join('')
                    ctx.reply(`–í–æ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –≤–∞—à–∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä:\n${ctx.session.procedureList}`,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æ‚úÖ', 'reservationMenu')
                    ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                }
                else (ctx.reply('–ù–∏ —É –∫–æ–≥–æ –∏–∑ –≤–∞—à–µ–≥–æ –Ω–æ–º–µ—Ä–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä.', Markup.inlineKeyboard([Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æ‚úÖ', 'reservationMenu')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id)))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        return MainScene
    }
    GenDateInScene(){
        const DateInScene = new Scenes.BaseScene( 'DateInScene')
            DateInScene.enter(async (ctx) => {
                ctx.session.message_id_tempMG.push((await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –≤—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è.')).message_id)
                ctx.session.message_id_tempMG.push((await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É –≤–∞—à–µ–≥–æ –∑–∞–µ–¥–∞', {reply_markup: {force_reply: true, input_field_placeholder: 'YYYY MM DD'}})).message_id)
                ctx.session.message_id_tempMG.push((await ctx.reply('„Ö§', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            })
            DateInScene.on(message('text'), async (ctx) => {
                ctx.session.date = []
                ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if (ctx.message.text.trim().split(/\s+/).length != 3) {
                    await this.ClearScreen(ctx)
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                    ctx.scene.reenter()
            }
            else{
                await this.ClearScreen(ctx)
                ctx.message.text.trim().split(/\s+/).forEach(async item => {
                if(isNaN(item)){
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                    ctx.scene.reenter()
                }
                ctx.session.date.push(item)})
                if(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`) == 0 ||
                isNaN(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`)) ||
                new Date(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`).setHours(0,0,0,0) < new Date().setHours(0,0,0,0))
                {
                    console.log(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`), new Date())
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                    ctx.scene.reenter()
                }
                else{
                    await this.ClearScreen(ctx)
                    return ctx.scene.enter('DaysOutScene')
                }
            }
        }
        )
        DateInScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        return DateInScene
    }
    GenDaysOutScene(){
        const DaysOutScene = new Scenes.BaseScene('DaysOutScene')
        DaysOutScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–ù–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞—Ç—å—Å—è?', {reply_markup: {force_reply: true, input_field_placeholder: '–í–≤–æ–¥–∏—Ç—å —Å—é–¥–∞'}})).message_id)
            ctx.session.message_id_tempMG.push((await ctx.reply('„Ö§', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            })
        DaysOutScene.on(message('text'), async (ctx) => {
            if(isNaN(ctx.message.text) || ctx.message.text < 0){
                ctx.session.message_id_tempMG.push(ctx.message.message_id)
                await this.ClearScreen(ctx)
                await ctx.session.message_id_tempMG.push((await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–Ω–∏')).message_id)
                ctx.scene.reenter()
            }
            else {
                ctx.session.days = ctx.message.text
                ctx.session.message_id_tempMG.push(ctx.message.message_id)
                await this.ClearScreen(ctx)
                ctx.session.formattedDateIn = `to_date('${ctx.session.date[0]} ${ctx.session.date[1]} ${ctx.session.date[2]}', 'YYYY MM DD')`
                ctx.session.tempDate = new Date(ctx.session.date[0],ctx.session.date[1]-1,ctx.session.date[2])
                ctx.session.tempDate.setDate(ctx.session.tempDate.getDate() + parseInt(ctx.session.days))
                ctx.session.formattedDateOut = `to_date('${ctx.session.tempDate.getFullYear()} ${ctx.session.tempDate.getMonth()+1} ${ctx.session.tempDate.getDate()}', 'YYYY MM DD')`
                ctx.scene.enter('PeopleAmountScene')
            }
            })
        DaysOutScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        return DaysOutScene
    }
    GenPeopleAmountScene(){
        const PeopleAmountScene = new Scenes.BaseScene('PeopleAmountScene')
        PeopleAmountScene.enter(async (ctx) => {
            await userPool.query(`WITH room_spaces AS (SELECT building_id, room_id, capacity, (capacity -
                (SELECT COALESCE(SUM(people_amount),0) from room join reservation on reservation.room_id = room_base.room_id where
                                room.room_id = room_base.room_id AND ((${(ctx.session.formattedDateIn)} BETWEEN date_in AND date_out) OR
                                                        (${(ctx.session.formattedDateOut)} BETWEEN date_in AND date_out) OR
                                                        (date_in BETWEEN ${(ctx.session.formattedDateIn)} and ${(ctx.session.formattedDateOut)})))) as beds_available FROM room as room_base ORDER BY room_id)
                SELECT room_spaces.room_id, building_name, room_price, room_spaces.capacity, room_spaces.beds_available FROM room_spaces join building on room_spaces.building_id = building.building_id where beds_available > 0`).then( result => {
                    ctx.session.gotQuery = result
                }).catch(e => {
                    console.log(e)
                    this.ShowError(ctx)
                    ctx.scene.enter('MainScene')
                })
                if (ctx.session.gotQuery.rowCount == 0) ctx.session.message_id_tempMG.push((await ctx.reply('–ü—Ä–æ—Å—Ç–∏—Ç–µ, –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã –≤—Å—ë –∑–∞–Ω—è—Ç–æ', Markup.inlineKeyboard([Markup.button.callback('–ñ–∞–ª—å...‚ùå', 'returnToMainMenu')]))).message_id)
                else {ctx.session.buttonlist = []
                ctx.session.maxBeds = Math.max(...ctx.session.gotQuery.rows.map(row => parseInt(row.beds_available)))
                for(ctx.session.tempi = 0; ctx.session.tempi < ctx.session.maxBeds; ctx.session.tempi++) {
                    if(ctx.session.tempi%3 == 0)ctx.session.buttonlist.push([])
                    ctx.session.buttonlist[Math.floor(ctx.session.tempi/3)].push(
                        Markup.button.callback(ctx.session.tempi+1, ctx.session.tempi+1)
                        )
                }
                ctx.session.buttonlist.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')])
                ctx.session.message_id_tempMG.push((await ctx.reply(`–ù–∞ —ç—Ç–∏ –¥–∞—Ç—ã –µ—Å—Ç—å –Ω–æ–º–µ—Ä–∞ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º —á–∏—Å–ª–æ–º —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ—Å—Ç, –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –≤–∞—Ä–∏–Ω–∞—Ç:`, Markup.inlineKeyboard(ctx.session.buttonlist))).message_id)
            }})

            PeopleAmountScene.action(/.*/, async (ctx) => {
                await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('MainScene')
                else {
                ctx.session.amount = ctx.update.callback_query.data
                ctx.scene.enter('RoomScene')
                }
            })
        return PeopleAmountScene
    }
    GenRoomScene(){
        const RoomScene = new Scenes.BaseScene('RoomScene')
        RoomScene.enter(async (ctx) => {
            ctx.session.buttonlist = []
            ctx.session.gotQuery.rows.forEach((item) => ctx.session.buttonlist.push([]))
            ctx.session.buttonlist.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')])
            ctx.session.gotQuery.rows.forEach((item, index) => {
                if (item.beds_available >= ctx.session.amount) ctx.session.buttonlist[index].push(
                    Markup.button.callback(`${item.building_name.slice(0, 14)} –°–≤–æ–±: ${item.beds_available}/${item.capacity}, ${item.room_price*ctx.session.amount*ctx.session.days} —Ä—É–±`, item.room_id)
                    )
            });
            ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª—è —Å–µ–±—è –ø–æ–¥—Ö–æ–¥—è—â–∏–π –Ω–æ–º–µ—Ä:`, Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            })
        RoomScene.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('MainScene')
                else {
                    ctx.session.room_id = ctx.update.callback_query.data
                    ctx.scene.enter('FoodScene')
                }
            })
        return RoomScene
    }
    GenFoodScene(){
        const FoodScene = new Scenes.BaseScene('FoodScene')
        FoodScene.enter(async (ctx) => {
            userPool.query(`select feeding_id, feeding_name, feeding_price from feeding_type`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach((item) => ctx.session.buttonlist.push([]))
                ctx.session.buttonlist.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')])
                result.rows.forEach((item, index) => {
                    ctx.session.buttonlist[index].push(
                        Markup.button.callback(`${item.feeding_name} - –¶–µ–Ω–∞: ${item.feeding_price*ctx.session.amount*ctx.session.days} —Ä—É–±`, item.feeding_id)
                        )
                });
                ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è:`, Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
        })
            })
        FoodScene.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('MainScene')
                else {
                    ctx.session.feeding_id = ctx.update.callback_query.data
                    ctx.scene.enter('GuestsScene')
                }
            })
        return FoodScene
    }
    GenGuestsnScene(){
        const GuestsScene = new Scenes.BaseScene('GuestsScene')
        GuestsScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω–Ω—ã–µ –≤—Å–µ—Ö –≥–æ—Å—Ç–µ–π –ø–æ–¥—Ä—è–¥: –ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ(–µ—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å 0) –ü–æ–ª(–ú/–ñ) –í–æ–∑—Ä–∞—Å—Ç –¢–µ–ª–µ—Ñ–æ–Ω?', {reply_markup: {force_reply: true, input_field_placeholder: '–í–≤–æ–¥–∏—Ç—å —Å—é–¥–∞'}})).message_id)
            ctx.session.message_id_tempMG.push((await ctx.reply('„Ö§', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        GuestsScene.on(message('text'), async ctx => {
            ctx.session.failed = false
            ctx.session.guests = []
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            await this.ClearScreen(ctx)
            ctx.message.text.trim().split(/\s+/).forEach(item => {
                ctx.session.guests.push(item)
            })
            if(ctx.session.guests.length < 6*ctx.session.amount){
                await this.ClearScreen(ctx)
                await ctx.session.message_id_tempMG.push((await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –≥–æ—Å—Ç–∏')).message_id)
                ctx.scene.reenter()
            }
            else {
                for(ctx.session.tempi = 0; ctx.session.tempi < ctx.session.amount; ctx.session.tempi++){
                if(ctx.session.guests[6*ctx.session.tempi+3] != '–ú' && ctx.session.guests[6*ctx.session.tempi+3] != '–º' && ctx.session.guests[6*ctx.session.tempi+3] != '–ñ' && ctx.session.guests[6*ctx.session.tempi+3] != '–∂'){
                    console.log(ctx.session.guests[6*ctx.session.tempi+3], 'sex fail')
                    ctx.session.failed = true
                }else if (ctx.session.guests[6*ctx.session.tempi+3] == '–ú' || ctx.session.guests[6*ctx.session.tempi+3] == '–º') {ctx.session.guests[6*ctx.session.tempi+3] = 'M'
            }
                else if (ctx.session.guests[6*ctx.session.tempi+3] == '–ñ' || ctx.session.guests[6*ctx.session.tempi+3] == '–∂') ctx.session.guests[6*ctx.session.tempi+3] = 'F'
                if(isNaN(ctx.session.guests[6*ctx.session.tempi+4])){
                    console.log(ctx.session.guests[6*ctx.session.tempi+4], 'nan fail')
                    ctx.session.failed = true
                }
            }
            if(ctx.session.failed == true){
                    await this.ClearScreen(ctx)
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –≥–æ—Å—Ç–∏')).message_id)
                    ctx.scene.reenter()
                } else  ctx.scene.enter('ConfirmationScene')
            }
        })
        return GuestsScene
    }
    GenConfirmationScene(){
        const ConfirmationScene = new Scenes.BaseScene('ConfirmationScene')
        ConfirmationScene.enter(async (ctx) => {
            console.log(ctx.session.guests)
            console.log(ctx.session.room_id)
            console.log(ctx.session.amount)
            console.log(ctx.session.feeding_id)
            console.log(ctx.session.formattedDateIn)
            console.log(ctx.session.formattedDateOut)
            ctx.session.addQuery = ''
            ctx.session.curval = parseInt((await userPool.query('SELECT last_value FROM guest_id_seq')).rows[0].last_value)+1
            ctx.session.addQuery += 'insert into guest values'
            for(ctx.session.tempi = 0; ctx.session.tempi < ctx.session.amount; ctx.session.tempi++){
                ctx.session.addQuery += `(nextval('guest_id_seq'), '${ctx.session.guests[6*ctx.session.tempi+5]}', '${ctx.session.guests[6*ctx.session.tempi]}',
                '${ctx.session.guests[6*ctx.session.tempi+1]}', '${ctx.session.guests[6*ctx.session.tempi+2]}', '${ctx.session.guests[6*ctx.session.tempi+3]}', ${ctx.session.guests[6*ctx.session.tempi+4]}),`
            }
            ctx.session.addQuery = ctx.session.addQuery.substring(0, ctx.session.addQuery.length-1) + ';\n'
            ctx.session.addQuery += `insert into reservation values(${ctx.from.id},${ctx.session.room_id},
                ${ctx.session.formattedDateIn},
                ${ctx.session.formattedDateOut},
                ${ctx.session.feeding_id},0,${ctx.session.amount});\n`
                ctx.session.addQuery += 'insert into reservation_rel values '
            for(ctx.session.tempi = 0; ctx.session.tempi < ctx.session.amount; ctx.session.tempi++){
                ctx.session.addQuery += `(${ctx.from.id}, ${parseInt(ctx.session.curval)+ctx.session.tempi}),`
            }
            ctx.session.addQuery = ctx.session.addQuery.substring(0, ctx.session.addQuery.length-1) + ';\n'
            console.log(ctx.session.addQuery)
            userPool.query(ctx.session.addQuery).then(result => {
                ctx.reply('–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞', Markup.inlineKeyboard([Markup.button.callback('–£—Ä–∞‚úÖ', 'returnToMainMenu')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        ConfirmationScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        return ConfirmationScene
    }
    GenDoctorGuardScene(){
        const DoctorGuardScene = new Scenes.BaseScene('DoctorGuardScene')
        DoctorGuardScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–î–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        DoctorGuardScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        DoctorGuardScene.on(message('text'), async ctx => {
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if(ctx.message.text != process.env.DOCTOR_PASSWORD) {
                await this.ClearScreen(ctx)
                ctx.session.message_id_tempMG.push((await ctx.reply('–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            }
            else {
                await this.ClearScreen(ctx)
                doctorPool.query(`select * from doctor where doctor_id = ${ctx.from.id}`).then(result => {
                    if(result.rowCount == 0){
                        ctx.scene.enter('DoctorNameScene')
                    }
                    else{
                        ctx.session.doctorInfo = result.rows[0]
                        ctx.scene.enter('DoctorMainMenu')
                    }
                }).catch(e => {
                    console.log(e)
                    this.ShowError(ctx)
                })
            }
        })
        return DoctorGuardScene
    }
    GenDoctorNameScene(){
        const DoctorNameScene = new Scenes.BaseScene('DoctorNameScene')
        DoctorNameScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∂–µ—Ç—Å—è, –≤—ã –∑–¥–µ—Å—å –≤–ø–µ—Ä–≤—ã–µ, –≤–≤–µ–¥–∏—Ç–µ —Å–≤–æ–∏ –§–ò–û (–ï—Å–ª–∏ –æ—Ç—á–µ—Å—Ç–≤–∞ –Ω–µ—Ç, —Ç–æ –ø–æ—Å—Ç–∞–≤—å—Ç–µ 0):', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        DoctorNameScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        DoctorNameScene.on(message('text'), async ctx => {
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if (ctx.message.text.trim().split(/\s+/).length != 3){
                ctx.session.message_id_tempMG.push((await ctx.reply('–§–ò–û –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
            }
            else {
                ctx.session.doctorInfot = ctx.message.text.trim().split(/\s+/)
                ctx.session.doctorInfo = {
                    doctor_surname: ctx.session.doctorInfot[0],
                    doctor_name: ctx.session.doctorInfot[1],
                    doctor_patronymic: ctx.session.doctorInfot[2]
                }
                await this.ClearScreen(ctx)
                ctx.scene.enter('DoctorSpecializationScene')
            }
        })
        return DoctorNameScene
    }
    GenDoctorSpecializationScene(){
        const DoctorSpecializationScene = new Scenes.BaseScene('DoctorSpecializationScene')
        DoctorSpecializationScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ—é —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        DoctorSpecializationScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        DoctorSpecializationScene.on(message('text'), async ctx => {
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if (ctx.message.text.trim().split(/\s+/).length > 30){
                ctx.session.message_id_tempMG.push((await ctx.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')).message_id)
            }
            else {
                ctx.session.doctorInfo.doctor_specialization = ctx.message.text
                await this.ClearScreen(ctx)
                doctorPool.query(`Insert into doctor values(${ctx.from.id}, '${ctx.session.doctorInfo.doctor_name}', '${ctx.session.doctorInfo.doctor_surname}', '${ctx.session.doctorInfo.doctor_patronymic}', '${ctx.session.doctorInfo.doctor_specialization}')`).then(() => {
                    ctx.scene.enter('DoctorMainMenu')
                }).catch(e => {
                    console.log(e)
                    this.ShowError(ctx)
                })
            }
        })
        return DoctorSpecializationScene
    }
    GenDoctorMainMenu(){
        const DoctorMainMenu = new Scenes.BaseScene('DoctorMainMenu')
        DoctorMainMenu.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.replyWithPhoto({source: './photos/doctor.jpg'}, 
            {
                caption: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.session.doctorInfo.doctor_name} ${ctx.session.doctorInfo.doctor_patronymic}! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –≤—Ä–∞—á–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ü©∫','proceduresMenu')],
                    [Markup.button.callback('–†–∞–±–æ—Ç—ã —Å –≥–æ—Å—Ç—è–º–∏üôã','guestsMenu')],
                    [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏üóëÔ∏è','removeExpiredProcedures')],
                    [Markup.button.callback('–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é‚ùå','returnToMainMenu')]
                ]
                ).reply_markup
            })).message_id)
        })
        DoctorMainMenu.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        DoctorMainMenu.action('removeExpiredProcedures', async ctx => {
            await this.ClearScreen(ctx)
            try{
                doctorPool.query('select delete_expired_procedures()')
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
            ctx.session.message_id_tempMG.push((await ctx.reply('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —É–¥–∞–ª–µ–Ω—ã')).message_id)
            ctx.scene.reenter()
        })
        DoctorMainMenu.action('guestsMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('DoctorGuestsScene')
        })
        DoctorMainMenu.action('proceduresMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('ProceduresMenu')
        })
        return DoctorMainMenu
    }
    GenProceduresMenu(){
        const ProceduresMenu = new Scenes.BaseScene('ProceduresMenu')
        ProceduresMenu.enter(async (ctx) => {
            doctorPool.query(`select procedure_id, doctor_id, procedure_name, procedure_price, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end, cabinet from procedure_ where doctor_id = ${ctx.from.id}`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach(item => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.procedure_name} ${item.procedure_start}`,item.procedure_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å‚ûï', 'AddProcedure')])
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.reply('–í–æ—Ç –≤—Å–µ –≤–∞—à–∏ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã. –î–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–ª–∏ —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—ã–π –ø—É–Ω–∫—Ç.',
                Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        ProceduresMenu.action(/.*/, async (ctx) => {
                await this.ClearScreen(ctx)
                    if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('DoctorMainMenu')
                    else if(ctx.update.callback_query.data == 'returnToProceduresMenu') ctx.scene.enter('ProceduresMenu')
                    else if(ctx.update.callback_query.data == 'removeProcedure') {
                        doctorPool.query(`delete from procedure_ where procedure_id = ${ctx.session.currentProcedure}`).then(()=>{
                            ctx.reply(`–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`,
                        Markup.inlineKeyboard([Markup.button.callback('–ü–æ–Ω—è–ª‚úÖ', 'returnToProceduresMenu')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                        }).catch(e => {
                            console.log(e)
                            this.ShowError(ctx)
                        })
                    }
                    else if(ctx.update.callback_query.data == 'AddProcedure') ctx.scene.enter('AddProcedureMenu')
                else {
                    ctx.session.currentProcedure = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    doctorPool.query(`select procedure_name, procedure_price, cabinet, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end from procedure_ where procedure_id = ${ctx.session.currentProcedure}`).then(result => {
                        ctx.reply(`–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ—Ü–µ–¥—É—Ä–µ "${result.rows[0].procedure_name}"\n–¶–µ–Ω–∞: ${result.rows[0].procedure_price} —Ä—É–±. \n–ö–∞–±–∏–Ω–µ—Ç: ${result.rows[0].cabinet} \n–í—Ä–µ–º—è: ${result.rows[0].procedure_start}-${result.rows[0].procedure_end}`,
                        Markup.inlineKeyboard([[Markup.button.callback('–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', 'removeProcedure')], [Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToProceduresMenu')]])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                    }).catch(e => {
                        console.log(e)
                        this.ShowError(ctx)
                    })
                }
        })
        return ProceduresMenu
    }
    GenAddProcedureMenu(){
        const AddProcedureMenu = new Scenes.BaseScene('AddProcedureMenu')
        AddProcedureMenu.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply(`–í—ã –ø–æ–ø–∞–ª–∏ –≤ –º–µ–Ω—é –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã, –≤–≤–µ–¥–∏—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            –ù–∞–∑–≤–∞–Ω–∏–µ 
            –¶–µ–Ω–∞(—Ä—É–±)
            –ö–∞–±–∏–Ω–µ—Ç
            –í—Ä–µ–º—è –ù–∞—á–∞–ª–∞(–ß–ß:–ú–ú) –í—Ä–µ–º—è –ö–æ–Ω—Ü–∞(–ß–ß:–ú–ú)`, Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        AddProcedureMenu.on(message('text'), async (ctx) => {
            ctx.session.procedureArray = ctx.message.text.split('\n')
            ctx.session.procedureArray[4] = ctx.session.procedureArray[3].split(/\s+/)[1]
            ctx.session.procedureArray[3] = ctx.session.procedureArray[3].split(/\s+/)[0]
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            await this.ClearScreen(ctx)
            if(ctx.session.procedureArray.length != 5) {
                ctx.session.message_id_tempMG.push((await ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ')).message_id)
                ctx.scene.reenter()
            } 
            else if(ctx.session.procedureArray[0].trim().length > 40) {
                ctx.session.message_id_tempMG.push((await ctx.reply('–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ')).message_id)
                ctx.scene.reenter()
            } 
            else if(isNaN(ctx.session.procedureArray[1]) || parseInt(ctx.session.procedureArray[1]) < 0){
                ctx.session.message_id_tempMG.push((await ctx.reply('–¶–µ–Ω–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —á–∏—Å–ª–æ–º')).message_id)
                ctx.scene.reenter()
            }
            else if(ctx.session.procedureArray[2].trim().length > 5){
                ctx.session.message_id_tempMG.push((await ctx.reply('–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥—ë–Ω –∫–∞–±–∏–Ω–µ—Ç')).message_id)
                ctx.scene.reenter()
            }
            else if(isNaN(ctx.session.procedureArray[3].trim().split(':')[0]) || isNaN(ctx.session.procedureArray[3].trim().split(':')[1]) || ctx.session.procedureArray[3].trim().split(':').length != 2){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                ctx.scene.reenter()
            }
            else if(isNaN(ctx.session.procedureArray[4].trim().split(':')[0]) || isNaN(ctx.session.procedureArray[4].trim().split(':')[1]) || ctx.session.procedureArray[4].trim().split(':').length != 2){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í—Ä–µ–º—è –∫–æ–Ω—Ü–∞ –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                ctx.scene.reenter()
            }
            else {
                doctorPool.query(`insert into procedure_ values(nextval('procedure_id_seq'), ${ctx.from.id}, '${ctx.session.procedureArray[0].trim()}', ${parseInt(ctx.session.procedureArray[1])}, '${ctx.session.procedureArray[3].trim()}', '${ctx.session.procedureArray[4].trim()}', '${ctx.session.procedureArray[2].trim()}')`).then(()=>{
                    ctx.reply('–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞',
                    Markup.inlineKeyboard([Markup.button.callback('–•–æ—Ä–æ—à–æ‚úÖ', 'returnToProcedures')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                }).catch(e => {
                    console.log(e)
                    this.ShowError(ctx)
                })
            }
        })
        AddProcedureMenu.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('DoctorMainMenu')
        })
        AddProcedureMenu.action('returnToProcedures', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('ProceduresMenu')
        })
        return AddProcedureMenu
    }
    GenDoctorGuestsScene(){
        const DoctorGuestsScene = new Scenes.BaseScene('DoctorGuestsScene')
        DoctorGuestsScene.enter(async (ctx) => {
            doctorPool.query(`select guest.guest_id, guest_name, guest_surname, room_id from guest join
            reservation_rel on guest.guest_id = reservation_rel.guest_id join reservation on reservation.reservation_id = reservation_rel.reservation_id where (NOW()::DATE BETWEEN date_in AND date_out)`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach(item => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.guest_name} ${item.guest_surname} –ù–æ–º    ${item.room_id}`,item.guest_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –≥–æ—Å—Ç—è.',
                Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        DoctorGuestsScene.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('DoctorMainMenu')
                else if(ctx.update.callback_query.data == 'guestProceduresMenu') ctx.scene.enter('guestProceduresMenuScene')
                else if(ctx.update.callback_query.data == 'guestIllnessMenu') ctx.scene.enter('GuestIllnessMenuScene')
                else {
                ctx.session.currentGuest = ctx.update.callback_query.data
                // ctx.scene.enter('RoomScene')
                try{
                    ctx.session.guestInfo = (await doctorPool.query(`select guest_surname, guest_name, guest_patronymic,  to_char(date_in, 'YYYY-MM-DD') as date_in,  to_char(date_out, 'YYYY-MM-DD') as date_out, room_id from guest join reservation_rel on reservation_rel.guest_id = guest.guest_id join reservation on reservation_rel.reservation_id = reservation.reservation_id where guest.guest_id = ${ctx.session.currentGuest}`)).rows[0]
                    ctx.session.guestProcedures = (await doctorPool.query(`select procedure_name, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end,  to_char(procedure_day, 'DD-MM') as procedure_day, procedure_price from procedure_appointment join procedure_ on procedure_appointment.procedure_id = procedure_.procedure_id where guest_id = ${ctx.session.currentGuest}`)).rows
                    ctx.session.guestIllness = (await doctorPool.query(`select illness_name from illness where guest_id = ${ctx.session.currentGuest}`)).rows
                    ctx.session.guestInfoText = `–ì–æ—Å—Ç—å: ${ctx.session.guestInfo.guest_surname} ${ctx.session.guestInfo.guest_name} ${ctx.session.guestInfo.guest_patronymic}\n–ù–æ–º–µ—Ä –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è: ${ctx.session.guestInfo.room_id}\n–î–∞—Ç—ã: ${ctx.session.guestInfo.date_in.split('-').join('.')} \u2014 ${ctx.session.guestInfo.date_out.split('-').join('.')}\n`
                    ctx.session.guestInfoText += '–ü—Ä–æ—Ü–µ–¥—É—Ä—ã:\n'
                    ctx.session.guestProcedures.forEach((item, index) => {
                        ctx.session.guestInfoText+=`${index+1}. ${item.procedure_name}\n${item.procedure_start}-${item.procedure_end}\n–î–∞—Ç–∞: ${item.procedure_day.split('-').join('.')}\n–¶–µ–Ω–∞:${item.procedure_price} —Ä—É–±.\n\n`
                    })
                    ctx.session.guestInfoText += '–ë–æ–ª–µ–∑–Ω–∏:\n'
                    ctx.session.guestIllness.forEach((item, index) => {
                        ctx.session.guestInfoText+=`${index+1}. ${item.illness_name}\n`
                    })
                    ctx.session.message_id_tempMG.push((await ctx.reply(ctx.session.guestInfoText,  Markup.inlineKeyboard([
                        [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä–∞–º–∏ü©∫', 'guestProceduresMenu')],
                        [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ–ª–µ–∑–Ω—è–º–∏üíä', 'guestIllnessMenu')],
                        [Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]]))).message_id)
                }
                catch(e){
                    console.log(e)
                    this.ShowError(ctx)
                }
            }
    })
        return DoctorGuestsScene
    }
    GenGuestIllnessMenuScene(){
        const GuestIllnessMenuScene = new Scenes.BaseScene('GuestIllnessMenuScene')
        GuestIllnessMenuScene.enter(async (ctx) => {
            doctorPool.query(`select illness_name from illness where guest_id = ${ctx.session.currentGuest}`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach(item => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.illness_name}`,item.illness_name)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å‚ûï', 'AddIllness')])
                ctx.session.buttonlist.push([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')])
                ctx.reply('–í–æ—Ç –≤—Å–µ –±–æ–ª–µ–∑–Ω–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞, –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –Ω—É–∂–Ω—É—é –±–æ–ª–µ–∑–Ω—å.',
                Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        GuestIllnessMenuScene.action(/.*/, async (ctx) => {
                await this.ClearScreen(ctx)
                console.log(ctx.update.callback_query.data)
                    if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('DoctorGuestsScene')
                    else if(ctx.update.callback_query.data == 'doNotDelete') ctx.scene.reenter()
                    else if(ctx.update.callback_query.data == 'deleteCurIllness') {
                        try{
                            await doctorPool.query(`delete from illness where illness_name = '${ctx.session.currentIllness}'`)
                        }
                        catch(e){
                            console.log(e)
                            this.ShowError(ctx)
                        }
                        ctx.scene.reenter()
                    }
                    else if(ctx.update.callback_query.data == 'AddIllness') {ctx.scene.enter('GuestIllnessAddScene')}
                    else {
                    ctx.session.currentIllness = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    ctx.session.message_id_tempMG.push((await ctx.reply(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${ctx.session.currentIllness}?`,  Markup.inlineKeyboard([
                        [Markup.button.callback('–î–∞‚úÖ', 'deleteCurIllness')],
                        [Markup.button.callback('–ù–µ—Ç‚ùå', 'doNotDelete')]]))).message_id)
                }
        })
        return GuestIllnessMenuScene
    }
    GenGuestIllnessAddScene(){
        const GuestIllnessAddScene = new Scenes.BaseScene('GuestIllnessAddScene')
        GuestIllnessAddScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π –±–æ–ª–µ–∑–Ω–∏`, 
            Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        GuestIllnessAddScene.action('returnToMainMenu', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('GuestIllnessMenuScene')
        })
        GuestIllnessAddScene.on(message('text'), async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            ctx.session.newIllnessName = ctx.message.text
            try{
                await doctorPool.query(`insert into illness values(${ctx.session.currentGuest}, '${ctx.session.newIllnessName}')`)
                ctx.session.message_id_tempMG.push((await ctx.reply(`–ë–æ–ª–µ–∑–Ω—å —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞`,
                Markup.inlineKeyboard([
                    Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æüëç', 'returnToMainMenu')
                ]))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        return GuestIllnessAddScene
    }
    GenguestProceduresMenuScene(){
        const guestProceduresMenuScene = new Scenes.BaseScene('guestProceduresMenuScene')
        guestProceduresMenuScene.enter(async (ctx) => {
            doctorPool.query(`select procedure_.procedure_id, doctor_id, procedure_name, procedure_price, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end, to_char(procedure_day, 'DD-MM') as procedure_day, cabinet from procedure_ join procedure_appointment on procedure_appointment.procedure_id = procedure_.procedure_id where guest_id = ${ctx.session.currentGuest}`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach(item => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.procedure_day.split('-').join('.')} ${item.procedure_start} ${item.procedure_name}`,item.procedure_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–î–æ–±–∞–≤–∏—Ç—å‚ûï', 'AddGuestProcedure')])
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.reply('–í–æ—Ç –≤—Å–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –≥–æ—Å—Ç—è. –î–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±–µ—Ä–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É',
                Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        guestProceduresMenuScene.action(/.*/, async (ctx) => {
                await this.ClearScreen(ctx)
                    if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('DoctorGuestsScene')
                    else if(ctx.update.callback_query.data == 'doNotDelete') ctx.scene.enter('ProceduresMenu')
                    else if(ctx.update.callback_query.data == 'deleteCurProc') {
                        doctorPool.query(`delete from procedure_ where procedure_id = ${ctx.session.currentProcedure}`).then(()=>{
                            ctx.reply(`–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞`,
                        Markup.inlineKeyboard([Markup.button.callback('–ü–æ–Ω—è–ª‚úÖ', 'returnToMainMenu')])).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                        }).catch(e => {
                            console.log(e)
                            this.ShowError(ctx)
                        })
                    }
                    else if(ctx.update.callback_query.data == 'AddGuestProcedure') ctx.scene.enter('AddProcedureGuestMenu')
                    else {
                        ctx.session.currentProcedure = ctx.update.callback_query.data
                        // ctx.scene.enter('RoomScene')
                        ctx.session.message_id_tempMG.push((await ctx.reply(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å ${ctx.session.currentProcedure}?`,  Markup.inlineKeyboard([
                            [Markup.button.callback('–î–∞‚úÖ', 'deleteCurProc')],
                            [Markup.button.callback('–ù–µ—Ç‚ùå', 'doNotDelete')]]))).message_id)
                        }
                    })
        return guestProceduresMenuScene
    }
    GenAddProcedureGuestMenu(){
        const AddProcedureGuestMenu = new Scenes.BaseScene('AddProcedureGuestMenu')
        AddProcedureGuestMenu.enter(async (ctx) => {
            doctorPool.query(`select procedure_.procedure_id, doctor_id, procedure_name, procedure_price, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end, cabinet from procedure_`).then(result => {
                ctx.session.buttonlist = []
                result.rows.forEach(item => {
                    ctx.session.buttonlist.push([Markup.button.callback(`$${item.procedure_price} —Ä—É–±. ${item.procedure_name}, ${item.procedure_start}`,item.procedure_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ–¥—É—Ä—É –¥–ª—è –≥–æ—Å—Ç—è:',
                Markup.inlineKeyboard(ctx.session.buttonlist)).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
            }).catch(e => {
                console.log(e)
                this.ShowError(ctx)
            })
        })
        AddProcedureGuestMenu.action(/.*/, async (ctx) => {
                await this.ClearScreen(ctx)
                    if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('DoctorGuestsScene')
                    else {
                        ctx.session.currentProcedureId = ctx.update.callback_query.data
                        // ctx.scene.enter('RoomScene')
                        ctx.scene.enter('ProcedureDateAssignment')
                    }
                })
        return AddProcedureGuestMenu
    }
    GenProcedureDateAssignment(){
        const ProcedureDateAssignment = new Scenes.BaseScene('ProcedureDateAssignment')
        ProcedureDateAssignment.enter(async (ctx) => {
            try{
                ctx.session.guestInfo = (await doctorPool.query(`select guest_surname, guest_name, guest_patronymic, to_char(date_in, 'YYYY-MM-DD') as date_in, to_char(date_out, 'YYYY-MM-DD') as date_out, room_id from guest join reservation_rel on reservation_rel.guest_id = guest.guest_id join reservation on reservation_rel.reservation_id = reservation.reservation_id where guest.guest_id = ${ctx.session.currentGuest}`)).rows[0]
                ctx.session.procedureInfo = (await doctorPool.query(`select procedure_name, to_char(procedure_start, 'HH24:MI') as procedure_start, to_char(procedure_end, 'HH24:MI') as procedure_end from procedure_ where procedure_id = ${ctx.session.currentProcedureId}`)).rows[0]
                ctx.session.message_id_tempMG.push((await ctx.reply(`–ì–æ—Å—Ç—å: ${ctx.session.guestInfo.guest_surname} ${ctx.session.guestInfo.guest_name} ${ctx.session.guestInfo.guest_patronymic}\n–î–∞—Ç—ã: ${ctx.session.guestInfo.date_in} \u2014 ${ctx.session.guestInfo.date_out}\n–ü—Ä–æ—Ü–µ–¥—É—Ä–∞: ${ctx.session.procedureInfo.procedure_name}\n${ctx.session.procedureInfo.procedure_start} \u2014 ${ctx.session.procedureInfo.procedure_end}\n–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–æ—Ü–µ–¥—É—Ä—ã:`, {reply_markup: {force_reply: true, input_field_placeholder: 'YYYY MM DD'}})).message_id)
                ctx.session.message_id_tempMG.push((await ctx.reply('„Ö§', Markup.inlineKeyboard([
                    [Markup.button.callback('–°–µ–≥–æ–¥–Ω—è', 'today')],
                    [Markup.button.callback('–ó–∞–≤—Ç—Ä–∞', 'tomorrow')],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]
                ]))).message_id)

            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
            
        })
        ProcedureDateAssignment.action('returnToMainMenu', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('AddProcedureGuestMenu')
        })
        ProcedureDateAssignment.action('today', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.session.tempDate = new Date()
            ctx.session.formattedDate = `to_date('${ctx.session.tempDate.getFullYear()} ${ctx.session.tempDate.getMonth()+1} ${ctx.session.tempDate.getDate()}', 'YYYY MM DD')`
            ctx.scene.enter('ProcedureAddConfirmation')
        })
        ProcedureDateAssignment.action('tomorrow', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.session.tempDate = new Date()
            ctx.session.tempDate.setDate(ctx.session.tempDate.getDate() + 1)
            if(ctx.session.tempDate.setHours(0,0,0,0) < new Date(ctx.session.guestInfo.date_out).setHours(0,0,0,0)){
                await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø–æ–∑–∂–µ –æ—Ç—ä–µ–∑–¥–∞ –≥–æ—Å—Ç—è')).message_id)
                ctx.scene.reenter()
            }
            else{
                await this.ClearScreen(ctx)
                ctx.session.formattedDate = `to_date('${ctx.session.tempDate.getFullYear()} ${ctx.session.tempDate.getMonth()+1} ${ctx.session.tempDate.getDate()}', 'YYYY MM DD')`
                ctx.scene.enter('ProcedureAddConfirmation')
            }
        })
        ProcedureDateAssignment.on(message('text'), async ctx => {
            ctx.session.date = []
                ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if (ctx.message.text.trim().split(/\s+/).length != 3) {
                    await this.ClearScreen(ctx)
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                    ctx.scene.reenter()
            }
            else{
                await this.ClearScreen(ctx)
                ctx.message.text.trim().split(/\s+/).forEach(async item => {
                if(isNaN(item)){
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –±—ã–ª–∞ –≤–≤–µ–¥–µ–Ω–∞ –Ω–µ–≤–µ—Ä–Ω–æ')).message_id)
                    ctx.scene.reenter()
                }
                ctx.session.date.push(item)})
                if(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`) == 0 ||
                isNaN(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`)) ||
                new Date(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`).setHours(0,0,0,0) < new Date().setHours(0,0,0,0))
                {
                    console.log(Date.parse(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`), new Date())
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ —Ä–∞–Ω—å—à–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π')).message_id)
                    ctx.scene.reenter()
                }
                else if(new Date(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`).setHours(0,0,0,0) > new Date(ctx.session.guestInfo.date_out).setHours(0,0,0,0)){
                    await ctx.session.message_id_tempMG.push((await ctx.reply('–î–∞—Ç–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –Ω–µ –ø–æ–∑–∂–µ –æ—Ç—ä–µ–∑–¥–∞ –≥–æ—Å—Ç—è')).message_id)
                    ctx.scene.reenter()
                }
                else{
                    await this.ClearScreen(ctx)
                    console.log(new Date(`${ctx.session.date[0]}-${ctx.session.date[1]}-${ctx.session.date[2]}`).setHours(0,0,0,0), new Date(ctx.session.guestInfo.date_out).setHours(0,0,0,0))
                    ctx.session.formattedDate = `to_date('${ctx.session.date[0]} ${ctx.session.date[1]} ${ctx.session.date[2]}', 'YYYY MM DD')`
                    ctx.scene.enter('ProcedureAddConfirmation')
                }
            }
            })
        return ProcedureDateAssignment
    }
    GenProcedureAddConfirmation(){
        const ProcedureAddConfirmation = new Scenes.BaseScene('ProcedureAddConfirmation')
        ProcedureAddConfirmation.enter(async (ctx) => {
            try{
                doctorPool.query(`insert into procedure_appointment values(${ctx.session.currentGuest}, ${ctx.session.currentProcedureId}, ${ctx.session.formattedDate})`)
                ctx.session.message_id_tempMG.push((ctx.reply(`–ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —É—Å–ø–µ—à–Ω–æ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞`,
                Markup.inlineKeyboard([
                    Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æüëç', 'returnToMainMenu')
                ]))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
            
        })
        ProcedureAddConfirmation.action('returnToMainMenu', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('guestProceduresMenuScene')
        })
        return ProcedureAddConfirmation
    }
    GenAdminGuardScene(){
        const AdminGuardScene = new Scenes.BaseScene('AdminGuardScene')
        AdminGuardScene.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.reply('–î–ª—è –≤—Ö–æ–¥–∞ –≤ –º–µ–Ω—é –≤–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
        })
        AdminGuardScene.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        AdminGuardScene.on(message('text'), async ctx => {
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            if(ctx.message.text != process.env.ADMIN_PASSWORD) {
                await this.ClearScreen(ctx)
                ctx.session.message_id_tempMG.push((await ctx.reply('–ü–∞—Ä–æ–ª—å –≤–≤–µ–¥—ë–Ω –Ω–µ–≤–µ—Ä–Ω–æ', Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            }
            else {
                await this.ClearScreen(ctx)
                ctx.scene.enter('AdminMainMenu')
            }
        })
        return AdminGuardScene
    }
    GenAdminMainMenu(){
        const AdminMainMenu = new Scenes.BaseScene('AdminMainMenu')
        AdminMainMenu.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await ctx.replyWithPhoto({source: './photos/shodan.jfif'}, 
            {
                caption: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${ctx.from.first_name}!
–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–µ–Ω—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?`,
                reply_markup: Markup.inlineKeyboard([
                    [Markup.button.callback('–ü—Ä–æ—Å–º–æ—Ç—Ä –±—Ä–æ–Ω–µ–πüóìÔ∏è','reservationMenu')],
                    [Markup.button.callback('–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Ä–∞—á–∞–º–∏üë®‚Äç‚öïÔ∏è','docAdminMenu')],
                    [Markup.button.callback('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ωüí∏','changePrices')],
                    [Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏üóëÔ∏è','removeExpiredReservations')],
                    [Markup.button.callback('–í—ã—Ö–æ–¥ –∏–∑ –º–µ–Ω—é‚ùå','returnToMainMenu')]
                ]
                ).reply_markup
            })).message_id)
        })
        AdminMainMenu.action('removeExpiredReservations', async ctx => {
            await this.ClearScreen(ctx)
            try{
                adminPool.query('select delete_expired_reservations()')
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
            ctx.session.message_id_tempMG.push((await ctx.reply('–ü—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –±—Ä–æ–Ω–∏ —É–¥–∞–ª–µ–Ω—ã')).message_id)
            ctx.scene.reenter()
        })
        AdminMainMenu.action('returnToMainMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('MainScene')
        })
        AdminMainMenu.action('docAdminMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('DocAdminMenu')
        })
        AdminMainMenu.action('changePrices', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('ChangePricesMenu')
        })
        AdminMainMenu.action('reservationMenu', async ctx => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('ResAdminMenu')
        })
        return AdminMainMenu
    }
    GenResAdminMenu(){
        const ResAdminMenu = new Scenes.BaseScene('ResAdminMenu')
        ResAdminMenu.enter(async (ctx) => {
            try{
                ctx.session.reservationsAll = (await adminPool.query(`select extract(day from date_out::timestamp-date_in::timestamp) as nights, reservation_id, room.room_id, building_name, to_char(date_in, 'YYYY-MM-DD') as date_in, to_char(date_out, 'YYYY-MM-DD') as date_out, people_amount from reservation join room on reservation.room_id = room.room_id join building on building.building_id = room.building_id order by date_in`)).rows
                ctx.session.buttonlist = []
                ctx.session.reservationsAll.forEach((item) => {
                    ctx.session.buttonText = ''
                    ctx.session.date_in = new Date(item.date_in).setHours(0,0,0,0)
                    ctx.session.date_out = new Date(item.date_out).setHours(0,0,0,0)
                    if (ctx.session.date_in > new Date().setHours(0,0,0,0)) ctx.session.buttonText = '‚è±Ô∏è '
                    else if (ctx.session.date_in <= new Date().setHours(0,0,0,0) && ctx.session.date_out >= new Date().setHours(0,0,0,0)) ctx.session.buttonText = '‚úÖ '
                    else if (ctx.session.date_out < new Date().setHours(0,0,0,0)) ctx.session.buttonText = '‚ùå '
                    ctx.session.buttonText += `${item.building_name.slice(0,3)}-${item.room_id} ${item.date_in.split('-').join('.')} \u2014 ${item.date_out.split('-').join('.')} (${item.nights}) –ß–µ–ª:${item.people_amount}`
                    ctx.session.buttonlist.push([Markup.button.callback(ctx.session.buttonText,item.reservation_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.session.totalBeds = (await adminPool.query('select sum(capacity) from room')).rows[0].sum
                ctx.session.currentPeople = (await adminPool.query(`select sum(people_amount) from reservation where (NOW()::DATE between date_in and date_out)`)).rows[0].sum
                ctx.session.message_id_tempMG.push((await ctx.reply(`–¢–µ–∫—É—â–∞—è –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω–æ—Å—Ç—å —Å–∞–Ω–∞—Ç–æ—Ä–∏—è: ${ctx.session.currentPeople}/${ctx.session.totalBeds}.`,
                Markup.inlineKeyboard(ctx.session.buttonlist))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        ResAdminMenu.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('AdminMainMenu')
                else if(ctx.update.callback_query.data == 'Cancel') ctx.scene.reenter()
                else if(ctx.update.callback_query.data == 'deleteRes') 
                {
                    ctx.reply(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—å?:`,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–î–∞‚úÖ', 'deleteResQuery'),
                        Markup.button.callback('–ù–µ—Ç‚ùå', 'Cancel')
                    ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                }
                else if(ctx.update.callback_query.data == 'deleteResQuery') 
                {
                    userPool.query(`select delete_reservation(${ctx.session.currentReservationId})`).then(()=>{
                        ctx.reply(`–ë—Ä–æ–Ω—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`,
                        Markup.inlineKeyboard([
                            Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æüëç', 'Cancel')
                        ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                    }).catch(e => {
                        console.log(e)
                        this.ShowError(ctx)
                    })
                }
                else {
                    ctx.session.currentReservationId = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    ReservationInfo(ctx)
                }
            })
            function ShowError(ctx){
                ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 
                    Markup.inlineKeyboard([
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'returnToMainMenu')])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
            }
            async function ReservationInfo(ctx) {
                try{
                    ctx.session.reservation = (await adminPool.query(`select building_name, room.room_id, feeding_type.feeding_name, reservation.reservation_price, to_char(date_in, 'YYYY-MM-DD') as date_in, to_char(date_out, 'YYYY-MM-DD') as date_out,
                    extract(day from date_out::timestamp-date_in::timestamp) as nights 
                    from reservation join feeding_type on feeding_type.feeding_id = reservation.feeding_id
                    join room on room.room_id = reservation.room_id join building on building.building_id = room.building_id where reservation_id = ${ctx.session.currentReservationId}`))
                    ctx.session.currentResGuestsInfo = (await adminPool.query(`select * from guest join reservation_rel on guest.guest_id = reservation_rel.guest_id
                    where reservation_id = ${ctx.session.currentReservationId}`))
                        ctx.session.guests = ''
                        ctx.session.currentResGuestsInfo.rows.forEach((row, index) => {
                            ctx.session.guests += `${index+1}. ${row.guest_name} ${row.guest_surname} ${row.guest_patronymic}\n–í–æ–∑—Ä–∞—Å—Ç: ${row.guest_age} –ü–æ–ª:${row.guest_sex}\n–¢–µ–ª–µ—Ñ–æ–Ω: ${row.phone_number}\n\n`
                        })
                        ctx.reply(`–ù–æ–º–µ—Ä –±—Ä–æ–Ω–∏: ${ctx.session.currentReservationId}, –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–µ–ª–æ–≤–µ–∫: ${ctx.session.currentResGuestsInfo.rowCount}\n–ù–æ–º–µ—Ä: ${ctx.session.reservation.rows[0].room_id}\n–î–∞—Ç—ã:
${ctx.session.reservation.rows[0].date_in.split('-').join('.')} \u2014 ${ctx.session.reservation.rows[0].date_out.split('-').join('.')} (${ctx.session.reservation.rows[0].nights} –Ω–æ—á–µ–π).
–ö–æ—Ä–ø—É—Å –ø—Ä–æ–∂–∏–≤–∞–Ω–∏—è \u2014 ${ctx.session.reservation.rows[0].building_name}
–¢–∏–ø –ø–∏—Ç–∞–Ω–∏—è \u2014 ${ctx.session.reservation.rows[0].feeding_name}
–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å \u2014 ${ctx.session.reservation.rows[0].reservation_price} —Ä—É–±.

–°–ø–∏—Å–æ–∫ –ø—Ä–æ–∂–∏–≤–∞—é—â–∏—Ö:
${ctx.session.guests}`, Markup.inlineKeyboard([[Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –±—Ä–æ–Ω—åüóëÔ∏è','deleteRes')],
[Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå','Cancel')]]
                        )).then(result1 => ctx.session.message_id_tempMG.push(result1.message_id))
                }
                catch(e){
                    console.log(e)
                    ShowError(ctx)
                }
            }
        
        return ResAdminMenu
    }
    GenDocAdminMenu(){
        const DocAdminMenu = new Scenes.BaseScene('DocAdminMenu')
        DocAdminMenu.enter(async (ctx) => {
            try{
                ctx.session.doctorsAll = (await adminPool.query(`select doctor.doctor_id, doctor_name, doctor_surname, doctor_specialization, count(procedure_id) from doctor join procedure_ on procedure_.doctor_id = doctor.doctor_id group by doctor.doctor_id`)).rows
                ctx.session.buttonlist = []
                ctx.session.doctorsAll.forEach((item) => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.doctor_surname} ${item.doctor_name} (${item.doctor_specialization.slice(0,4)}) –ü—Ä–æ—Ü: ${item.count}`,item.doctor_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.session.message_id_tempMG.push((await ctx.reply(`–ü–æ–∫–∞–∑–∞–Ω—ã –≤—Å–µ –¥–æ–∫—Ç–æ—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏—Ö –ø—Ä–æ—Ü–µ–¥—É—Ä`,
                Markup.inlineKeyboard(ctx.session.buttonlist))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        DocAdminMenu.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('AdminMainMenu')
                else if(ctx.update.callback_query.data == 'Cancel') ctx.scene.reenter()
                else if(ctx.update.callback_query.data == 'deleteDoc') 
                {
                    ctx.reply(`–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞?:`,
                    Markup.inlineKeyboard([
                        Markup.button.callback('–î–∞‚úÖ', 'deleteDocQuery'),
                        Markup.button.callback('–ù–µ—Ç‚ùå', 'Cancel')
                    ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                }
                else if(ctx.update.callback_query.data == 'deleteDocQuery') 
                {
                    userPool.query(`delete from doctor where doctor_id = ${ctx.session.currentDoctorId}`).then(()=>{
                        ctx.reply(`–í—Ä–∞—á —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω`,
                        Markup.inlineKeyboard([
                            Markup.button.callback('–ü–æ–Ω—è—Ç–Ω–æüëç', 'Cancel')
                        ])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
                    }).catch(e => {
                        console.log(e)
                        this.ShowError(ctx)
                    })
                }
                else {
                    ctx.session.currentDoctorId = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    DoctorInfo(ctx)
                }
            })
            function ShowError(ctx){
                ctx.reply('–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞', 
                    Markup.inlineKeyboard([
                    Markup.button.callback('–í –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', 'returnToMainMenu')])).then(result => ctx.session.message_id_tempMG.push(result.message_id))
            }
            async function DoctorInfo(ctx) {
                try{
                    ctx.session.doctorInfo = (await doctorPool.query(`select procedure_name, procedure_price, doctor_name, doctor_surname, doctor_patronymic, doctor_specialization, to_char(procedure_start, 'HH24:MI') as procedure_start from procedure_ join doctor on doctor.doctor_id = procedure_.doctor_id where doctor.doctor_id = ${ctx.session.currentDoctorId}`))
                    console.log(ctx.session.doctorInfo)
                    ctx.session.messageText = `–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≤—Ä–∞—á–µ:\n–§–ò–û: ${ctx.session.doctorInfo.rows[0].doctor_surname} ${ctx.session.doctorInfo.rows[0].doctor_name} ${ctx.session.doctorInfo.rows[0].doctor_patronymic}\n–°–ø–µ—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: ${ctx.session.doctorInfo.rows[0].doctor_specialization}\n–í—Å–µ–≥–æ –ø—Ä–æ—Ü–µ–¥—É—Ä: ${ctx.session.doctorInfo.rowCount}`
                    ctx.session.doctorInfo.rows.forEach((item, index) => {
                        ctx.session.messageText += `\n${index+1}. ${item.procedure_name} ${item.procedure_start} ${item.procedure_price} —Ä—É–±.`
                    })
                    ctx.session.message_id_tempMG.push((await ctx.reply(ctx.session.messageText, Markup.inlineKeyboard([[Markup.button.callback('–£–¥–∞–ª–∏—Ç—å –≤—Ä–∞—á–∞üóëÔ∏è','deleteDoc')],
                    [Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå','Cancel')]]
                                            ))).message_id)
                }
                catch(e)
                {
                    console.log(e)
                    ShowError(ctx)
                }
            }
        
        return DocAdminMenu
    }
    GenChangePricesMenu(){
        const ChangePricesMenu = new Scenes.BaseScene('ChangePricesMenu')
        ChangePricesMenu.enter(async (ctx) => {
            ctx.session.message_id_tempMG.push((await (ctx.reply('–¶–µ–Ω—É —á–µ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?',
            Markup.inlineKeyboard([[Markup.button.callback('–¶–µ–Ω—ã –∫–æ–º–Ω–∞—Çüè†','changeRoomPrice')],
            [Markup.button.callback('–¶–µ–Ω—É –ø–∏—Ç–∞–Ω–∏—èü•ê','changeFoodPrice')],
            [Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå','returnToMainMenu')]]
                        )))).message_id)
        })
        ChangePricesMenu.action('returnToMainMenu', async (ctx) => {
                await this.ClearScreen(ctx)
                ctx.scene.enter('AdminMainMenu')
        })
        ChangePricesMenu.action('changeRoomPrice', async (ctx) => {
            await this.ClearScreen(ctx)
            ctx.scene.enter('RoomPriceScene')
        })
        ChangePricesMenu.action('changeFoodPrice', async (ctx) => {
        await this.ClearScreen(ctx)
        ctx.scene.enter('FoodPriceScene')
        })
        return ChangePricesMenu
    }
    GenRoomPriceScene(){
        const RoomPriceScene = new Scenes.BaseScene('RoomPriceScene')
        RoomPriceScene.enter(async (ctx) => {
            try{
                ctx.session.buildings = (await adminPool.query(`select * from building`)).rows
                ctx.session.buttonlist = []
                ctx.session.buildings.forEach((item) => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.building_name} ${item.room_price}`,item.building_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.session.message_id_tempMG.push((await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ—Ä–ø—É—Å, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
                Markup.inlineKeyboard(ctx.session.buttonlist))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        RoomPriceScene.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('ChangePricesMenu')
                else {
                    ctx.session.buildingsId = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    ctx.scene.enter('RoomPriceChangeInput')
                }
            })
        
        return RoomPriceScene
    }
    GenRoomPriceChangeInput(){
        const RoomPriceChangeInput = new Scenes.BaseScene('RoomPriceChangeInput')
        RoomPriceChangeInput.enter(async (ctx) => {
            try{
                ctx.session.buildingInfo = (await adminPool.query(`select * from building where building_id = ${ctx.session.buildingsId}`)).rows[0]
                ctx.session.message_id_tempMG.push((await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è –∫–æ—Ä–ø—É—Å–∞ ${ctx.session.buildingInfo.building_name}\n(–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${ctx.session.buildingInfo.room_price} —Ä—É–±.):`,
                Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        RoomPriceChangeInput.action('returnToMainMenu', async (ctx) => {
                await this.ClearScreen(ctx)
                ctx.scene.enter('ChangePricesMenu')
        })
        RoomPriceChangeInput.on(message('text'), async (ctx) => {
            ctx.session.newPrice = ctx.message.text
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            await this.ClearScreen(ctx)
            if(isNaN(ctx.session.newPrice)){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')).message_id)
                ctx.scene.reenter()
            }
            else if(parseInt(ctx.session.newPrice) <= 0){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')).message_id)
                ctx.scene.reenter()
            }
            else{
                try{
                    await adminPool.query(`update building set room_price = ${ctx.session.newPrice} where building_id = ${ctx.session.buildingsId}`)
                    ctx.session.message_id_tempMG.push((await ctx.reply('–¶–µ–Ω–∞ –∫–æ–º–Ω–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')).message_id)
                    ctx.scene.enter('RoomPriceScene')
                }
                catch(e){
                    console.log(e)
                    this.ShowError(ctx)
                }
            }
    })
        
        return RoomPriceChangeInput
    }
//-----------------------------------------
    GenFoodPriceScene(){
        const FoodPriceScene = new Scenes.BaseScene('FoodPriceScene')
        FoodPriceScene.enter(async (ctx) => {
            try{
                ctx.session.allFood = (await adminPool.query(`select * from feeding_type`)).rows
                ctx.session.buttonlist = []
                ctx.session.allFood.forEach((item) => {
                    ctx.session.buttonlist.push([Markup.button.callback(`${item.feeding_name} ${item.feeding_price}`,item.feeding_id)])
                });
                ctx.session.buttonlist.push([Markup.button.callback('–í—ã—Ö–æ–¥‚ùå', 'returnToMainMenu')])
                ctx.session.message_id_tempMG.push((await ctx.reply(`–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø–∏—Ç–∞–Ω–∏—è, —Ü–µ–Ω—É –∫–æ—Ç–æ—Ä–æ–≥–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:`,
                Markup.inlineKeyboard(ctx.session.buttonlist))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        FoodPriceScene.action(/.*/, async (ctx) => {
            await this.ClearScreen(ctx)
                if(ctx.update.callback_query.data == 'returnToMainMenu') ctx.scene.enter('ChangePricesMenu')
                else {
                    ctx.session.feedingId = ctx.update.callback_query.data
                    // ctx.scene.enter('RoomScene')
                    ctx.scene.enter('FoodPriceChangeInput')
                }
            })
        
        return FoodPriceScene
    }
    GenFoodPriceChangeInput(){
        const FoodPriceChangeInput = new Scenes.BaseScene('FoodPriceChangeInput')
        FoodPriceChangeInput.enter(async (ctx) => {
            try{
                ctx.session.feedingInfo = (await adminPool.query(`select * from feeding_type where feeding_id = ${ctx.session.feedingId}`)).rows[0]
                ctx.session.message_id_tempMG.push((await ctx.reply(`–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É –¥–ª—è —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è ${ctx.session.feedingInfo.feeding_name}\n(–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞: ${ctx.session.feedingInfo.feeding_price} —Ä—É–±.):`,
                Markup.inlineKeyboard([Markup.button.callback('–û—Ç–º–µ–Ω–∞‚ùå', 'returnToMainMenu')]))).message_id)
            }
            catch(e){
                console.log(e)
                this.ShowError(ctx)
            }
        })
        FoodPriceChangeInput.action('returnToMainMenu', async (ctx) => {
                await this.ClearScreen(ctx)
                ctx.scene.enter('ChangePricesMenu')
        })
        FoodPriceChangeInput.on(message('text'), async (ctx) => {
            ctx.session.newPrice = ctx.message.text
            ctx.session.message_id_tempMG.push(ctx.message.message_id)
            await this.ClearScreen(ctx)
            if(isNaN(ctx.session.newPrice)){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ')).message_id)
                ctx.scene.reenter()
            }
            else if(parseInt(ctx.session.newPrice) <= 0){
                ctx.session.message_id_tempMG.push((await ctx.reply('–í–≤–µ–¥–∏—Ç–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ')).message_id)
                ctx.scene.reenter()
            }
            else{
                try{
                    await adminPool.query(`update feeding_type set feeding_price = ${ctx.session.newPrice} where feeding_id = ${ctx.session.feedingId}`)
                    ctx.session.message_id_tempMG.push((await ctx.reply('–¶–µ–Ω–∞ —Ç–∏–ø–∞ –ø–∏—Ç–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞')).message_id)
                    ctx.scene.enter('FoodPriceScene')
                }
                catch(e){
                    console.log(e)
                    this.ShowError(ctx)
                }
            }
    })
        
        return FoodPriceChangeInput
    }
}


module.exports = SceneGen